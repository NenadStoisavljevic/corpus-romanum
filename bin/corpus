#!/bin/sh

# Requires Whitacker's Words (Latin-English dictionary), you can
# find it at https://github.com/mk270/whitakers-words.

corpusdir="${XDG_DATA_HOME:-$HOME/.local/share}/corpus"
website="thelatinlibrary.com"

[ -d "$corpusdir" ] || mkdir -p "$corpusdir"

# A list of substitutes for the parts of speech.
subs="ADJ:A
ADV:D
CONJ:C
INTERJ:I
NUM:M
PREP:P
PRON:O
SUFFIX:S
SUPINE:U
TACKON:T
VPAR:R"

getlatin() { echo "Enter the full link of the text:"; read -r link
	domain="$(echo "$link" | cut -d '/' -f3)"
	echo "$domain" | grep -q "$website" || { echo "Not a valid URL. Check http://thelatinlibrary.com for Latin texts." && exit 1 ;}
	echo "Enter the name of the text:"; read -r name
	escname="$(echo "$name" | iconv -cf UTF-8 -t ASCII//TRANSLIT | tr -d '[:punct:]' | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | sed "s/-\+/-/g;s/\(^-\|-\$\)//g")"
	getfiles; for x in $(seq 1 99); do echo "$files" | grep -q "^$x)" || { export id=$x; break ;}; done
	file="$corpusdir/$id-$escname"
	text="$(mktemp)"

	# Format Latin text from website.
	curl -sf "$link" > "$text" || exit 1
	sed -i 's/<[^>]*>//g;s/&nbsp;//g;s/\t//g' "$text"
	cat -s "$text" > "$file" && rm -f "$text"
	sed -i '1d;$d' "$file"
}

sub() { for x in $1; do
		letter=$(echo "$subs" | grep -w "$x" | cut -d ':' -f2)
		[ -z "$letter" ] && labels="${labels}$x" || labels="${labels}$letter"
	done; printf "%s\n" "$labels"
}

tagfile() { [ ! -e "$1" ] && echo "The file does not exist." && return 1
	if [ ! -s "$1" ]; then
		echo "The file is empty. Please check the file." && exit 1
	elif [ -n "$id" ]; then
		file="$(basename "$1" | sed "s/[0-9]\{1,\}-//")"; id=$((id+1))
		output="$corpusdir/$id-$file-tagged" && echo "Tagging \"$file\"..."
	else
		output="$1-tagged" && echo "Tagging \"$1\"..."
	fi
	while read -r line; do
		[ -z "$line" ] && printf "\n" >> "$output" || last=${line##* } && total=$(echo "$line" | grep -ow "$last" | wc -w) && count=0
		for word in $line; do
			[ "$word" = "$last" ] && count=$((count+1))

			pos=$(words "$word" | grep -Ev '(;|])' | awk '$2~/[A-Z]$/{print $2}' | sort -u)
			letters=$(sub "$pos")

			if [ "$total" = "$count" ] && [ -z "$letters" ]; then
				printf "%s\n" "$word" >> "$output"
			elif [ "$total" = "$count" ]; then
				printf "%s//%s\n" "$word" "$letters" >> "$output"
			elif [ -z "$letters" ]; then
				printf "%s " "$word" >> "$output"
			else
				printf "%s//%s " "$word" "$letters" >> "$output"
			fi
		done
	done < "$1"
}

tagword() { [ -z "$1" ] && echo "Provide a word to tag." && exit 1
	for word in $1; do
		pos=$(words "$word" | grep -Ev '(;|])' | awk '$2~/[A-Z]/{print $2}' | sort -u)
		letters=$(sub "$pos")
		if [ -z "$letters" ]; then
			echo "$word is not a valid word."
		else
			printf "%s//%s\n" "$word" "$letters"
		fi
	done
}

check() { output="$1-tagged"
	if [ -e "$output" ]; then
		echo "The tagged file already exists, would you like to remove it? [yN]"
		read -r choice
		echo "$choice" | grep -iq "^y$" &&
			rm -f "$output" || exit 1
	fi
}

delete() { echo "Choose the file you would like to delete (by number):"
	list || exit 1
	read -r input
	chosen="^$input-"
	stored="$(find "$corpusdir" -type f -printf "%f\n" | grep "$chosen")"
	file="$(echo "$stored" | sed "s/^.-//")"; id=$((input+1))
	tagged="$(find "$corpusdir" -type f -printf "%f\n" | grep "$id-$file-tagged")"

	if [ -n "$stored" ] && [ -n "$tagged" ]; then
		echo "Would you like to remove the tagged file as well? [yN]"
		read -r choice
		echo "$choice" | grep -iq "^y$" &&
			rm -f "$corpusdir/$tagged" || echo "Skipping tagged file..."
		rm -f "$corpusdir/$stored"
	elif [ -n "$stored" ] && [ -z "$tagged" ]; then
		rm -f "$corpusdir/$stored"
	else
		echo "File does not exist, could not delete it." && exit 1
	fi
}

search() { [ "$(ls -A "$corpusdir")" ] || { echo "Corpus is empty, run with -c to add Latin texts." && exit 1 ;}
	echo "Searching corpus..."
	du -a "$corpusdir"/* | awk '{print $2}' | fzf --delimiter / --with-nth -1 | xargs -r less
}

getfiles() { files=$(find "$corpusdir" -type f -printf "%f\n" | grep -o "[0-9]\{1,\}-.*" | sed "s/-/) /" | sort -n) ;}

list() { getfiles && [ -n "$files" ] && echo "$files" || exit 1 ;}

setopus() { if [ -n "${opus+x}" ] && [ "$opus" != "$1" ]; then
		echo "Running $1 with $opus..."
		echo "Incompatible options given. Only one action may be specified per run."
		return 1
	else
		opus="$1"
	fi
}

corpusinfo() { cat << EOF
corpus: searchable Latin corpus and grammatical
part-of-speech tagger for Latin texts

Main options:
  -a link	Add a text to the corpus (must be from thelatinlibrary.com)
  -l		List all currently stored texts
  -t file	Tag a file which is not to be stored in the corpus
  -T word	Mark up a Latin word (recommended to be in double quotes)
  -s		Search all texts which are stored in the corpus
  -d		Choose a text to delete from the corpus
EOF
}

while getopts "asldt:T:" o; do case "${o}" in
	l) setopus list || exit 1 ;;
	t) setopus tagfile || exit 1; file="$OPTARG" ;;
	T) setopus tagword || exit 1; word="$OPTARG" ;;
	a) setopus add || exit 1 ;;
	s) setopus search || exit 1 ;;
	d) setopus delete || exit 1 ;;
	*) corpusinfo; exit 1 ;;
esac done

case "$opus" in
	list) list ;;
	tagfile) check "$file" && tagfile "$file" ;;
	tagword) tagword "$word" ;;
	add) getlatin && tagfile "$file" ;;
	search) search ;;
	delete) delete ;;
	*) corpusinfo; exit 1 ;;
esac
